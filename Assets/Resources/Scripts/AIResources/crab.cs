using System.Collections;using System.Collections.Generic;using UnityEngine;public class crab : MonoBehaviour {	public Transform player;    public UIProgressBar HPBar;
    private myFactory mF;	private GameObject bullet;	public characterProperty CharacterProperty;	// Use this for initialization	void Start () {		mF = Singleton<myFactory>.Instance;		CharacterProperty = this.gameObject.GetComponent<characterProperty>();	}		// Update is called once per frame	void Update () {        HPBar.GetComponent<HpUISlider>().UpdateVal(CharacterProperty.life / 100);
        if (this.transform.Find ("Projectile03(Clone)") != null)			return;		directionCtrl ();					//trun direction to the player		if(closeToAttack()) {			bullet = mF.getFireBullet ();			bullet.transform.parent = this.transform;			bullet.transform.localPosition = new Vector3 (0, 0, 0);			bullet.transform.localRotation = Quaternion.Euler(0, 180, 0);		}	}	void FixedUpdate() {		if (CharacterProperty.speed <= 0.0f)			CharacterProperty.speed = 0.0f;		if (CharacterProperty.damageValue <= 0.0f)			CharacterProperty.damageValue = 0.0f;		if (CharacterProperty.life <= 0) {			Destroy (this.gameObject);		}        if (CharacterProperty.life >= 100)
        {
            CharacterProperty.life = 100;
        }
    }	void OnCollisionEnter(Collision collision) {		if (collision.gameObject.name != "Bullet(Clone)")			return;		if (collision.gameObject.tag == this.gameObject.tag) {			CharacterProperty.speed -= 0.1f;			CharacterProperty.life -= 40;			CharacterProperty.damageValue -= 5f;		} else {			CharacterProperty.speed += 0.1f;			CharacterProperty.life += 40;			CharacterProperty.damageValue += 5f;					}	}	void directionCtrl() {//		string currentClip = animator.GetCurrentAnimatorClipInfo (0) [0].clip.name;//		if (!findThePlayer && currentClip != "Death")//			return;		Vector3 targetDir = player.position - transform.position;		float step = 10 * Time.deltaTime;		Vector3 newDir = Vector3.RotateTowards(transform.forward, targetDir, step, 0.0F);		transform.rotation = Quaternion.LookRotation(newDir);	}	bool closeToAttack() {		return Vector3.Distance (transform.position, player.position) < 4;	}}